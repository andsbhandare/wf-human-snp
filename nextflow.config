//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {
    help = false
    wfversion = "v0.1.0"
    aws_image_prefix = null
    aws_queue = null

    help = false
    bam = null
    ref = null
    bed = null
    out_dir = "output"
    model = "test_data/ont_r104_e81_sup_g5015"
    // workflow options
    download_demo = false
    call_retries = 5
    // clair3 parameters 
    sample_name = "SAMPLE"
    ctg_name = "EMPTY"
    include_all_ctgs = "False"
    ref_pct_full = 0.1
    var_pct_full = 0.7
    GVCF = "False"
    snp_min_af = 0.0
    indel_min_af = 0.0
    vcf_fn = "EMPTY"
    // used in hap.py evaluation 
    truth_vcf = ""
    truth_bed = ""

    // nf-core params
    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion'
}


executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
        process {
            withLabel:clair3 {
                container = "ontresearch/wf-human-snp:${params.wfversion}"
            }
            withLabel:happy {
                container = "jmcdani20/hap.py:v0.3.12"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // profile using conda environments rather than docker
    // containers
    conda {
        docker {
            enabled = false
        }
        process {
            withLabel:clair3 {
                conda = "${projectDir}/environment.yaml"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
        conda {
             cacheDir = ""
        }
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:clair3 {
                container = "${params.aws_image_prefix}-wf-human-snp:${params.wfversion}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
    aws.region = 'eu-west-1'
    aws.batch.cliPath = '/home/ec2-user/miniconda/bin/aws'
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
